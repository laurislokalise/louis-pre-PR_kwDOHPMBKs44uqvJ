{"version":3,"file":"components-Button-Button-stories-mdx.041cdbe6.iframe.bundle.js","mappings":";;;AAyBA;AACA;AACA;AAGA;AACA;AAOA;AAHA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;;;AC5CA;;ACWA;AACA;AAIA;AAGA;AACA;AACA;AAIA;AAQA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AAGA;AACA;;AAMA;AACA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;AAGA;;;;AAIA;;;AAGA;;;AAMA;;;;;;;AAOA;;;AAGA;;;AAGA;;AAGA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;;;AAMA;;;;AAIA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;;;;AAQA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;AC9MA","sources":["webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/components/Pressable/index.tsx","webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/components/Button/Button.tsx"],"sourcesContent":["import type { StyledProps } from '../../utils/styled';\nimport styled, { css } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type Color = NamedColor | 'currentColor' | 'inherit' | 'none';\n\ntype SvgProps = {\n    fill?: Color;\n    color?: Color;\n    stroke?: Color;\n};\n\nconst commonConfig = { shouldForwardProp: excludeProps(['fill', 'color', 'stroke']) };\n\nconst reservedKeywords = ['currentColor', 'inherit', 'none'];\n\nconst colorHelper = (inputColor: Color | undefined, props: StyledProps<unknown>) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props) || inputColor\n        : inputColor;\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    fill: ${({ fill, ...props }) => colorHelper(fill, props)};\n    color: ${({ color: svgColor, ...props }) => colorHelper(svgColor, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper(stroke, props)};\n`;\n\nexport const SvgRoot = styled.svg.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Path = styled.path.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Rect = styled.rect.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const G = styled.g.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Circle = styled.circle.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const LinearGradient = styled.linearGradient.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Defs = styled.defs.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Stop = styled.stop.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const ClipPath = styled.clipPath.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n","import type { AnchorHTMLAttributes, ButtonHTMLAttributes, ForwardedRef } from 'react';\nimport React, { forwardRef } from 'react';\n\nimport { Root } from './styles';\n\ntype ButtonProps = Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'href'> & {\n    href?: undefined;\n};\n\ntype AnchorProps = Omit<AnchorHTMLAttributes<HTMLAnchorElement>, 'href'> & {\n    href: string;\n};\n\nexport type PressableProps = ButtonProps | AnchorProps;\n\nexport type PressableElement = HTMLButtonElement | HTMLAnchorElement;\n\nexport const isAnchor = (props: PressableProps): props is AnchorProps => props.href !== undefined;\n\nexport const Pressable = forwardRef<PressableElement, PressableProps>(({ children, ...props }, ref) =>\n    isAnchor(props) ? (\n        <Root as=\"a\" {...props} ref={ref as ForwardedRef<HTMLAnchorElement>}>\n            {children}\n        </Root>\n    ) : (\n        <Root type=\"button\" {...(props as ButtonProps)} ref={ref as ForwardedRef<HTMLButtonElement>}>\n            {children}\n        </Root>\n    ),\n);\n\nPressable.displayName = 'Pressable';\n\nexport default Pressable;\n\n/*\n * There are some limitations in regards of Typescript. For some reason when href is passed as template literal and the\n * template literal contains dynamic part, then event object has \"any\". This doesn't happen with just a simple string or\n * template literal that has no variables.\n *\n * For example this will cause a TS error:\n * <Pressable href={`/project/${projectId}`} onClick={(e) => e.preventDefault()}>\n *\n * While this will not cause an error:\n * <Pressable href={`/project/hello`} onClick={(e) => e.preventDefault()}>\n *\n * In case it is needed to have a dynamic url, then workaround for this is to store the url in a variable:\n * const linkToProject = `/project/${projectId}`;\n * <Pressable href={linkToProject} onClick={(e) => e.preventDefault()}>\n * */\n","import type { Appearance, ButtonVariant, Size } from '.';\nimport { Spinner } from '../../foundations/icons';\nimport styled, { css } from '../../utils/styled';\nimport { color, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport Pressable from '../Pressable';\n\ntype ButtonProps = {\n    size: Size;\n    variant: ButtonVariant;\n    appearance: Appearance;\n    active: boolean;\n    disabled: boolean;\n    isLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n    const colorCodes = {\n        default: 'primary',\n        primary: 'primary',\n        danger: 'red',\n        warning: 'yellow',\n    } as const;\n\n    return colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover', appearance: Appearance, transparent = false) => {\n    if (appearance === 'default') {\n        return css`\n            background-color: transparent;\n            color: ${color('content.primary')};\n            border-color: ${color('content.primary')};\n        `;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n        color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n    `;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n    if (appearance === 'default') {\n        return undefined;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        color: ${color(`content.${colorCode}`)};\n\n        &:hover:not([disabled]):not([aria-expanded='true']) {\n            background-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            color: ${color(`content.${colorCode}`)};\n        }\n\n        &:active:not([disabled]) {\n            background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n        }\n\n        ${modifier(\n            'active',\n            css`\n                background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n                border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            `,\n        )}\n    `;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        default: css<ButtonProps>`\n            background-color: ${color(`content.white`)};\n            color: ${color('primary.400')};\n            border-color: transparent;\n\n            &:hover:not([disabled]):not([aria-expanded='true']) {\n                color: ${color('primary.500')};\n            }\n        `,\n        primary: css<ButtonProps>`\n            ${getColorStyles('primary', 'white')}\n        `,\n        warning: css<ButtonProps>`\n            ${getColorStyles('warning', 'black')}\n        `,\n        danger: css<ButtonProps>`\n            ${getColorStyles('danger', 'white')}\n        `,\n    })}\n\n    ${variants('variant', {\n        solid: css``,\n        outline: css<ButtonProps>`\n            border-width: 1px;\n            ${({ appearance }) => css`\n                ${getOutlineStyles('idle', appearance, true)}\n\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n                    ${getOutlineStyles('hover', appearance, true)}\n                }\n\n                &:active:not([disabled]) {\n                    ${getOutlineStyles('hover', appearance)}\n                }\n\n                ${modifier('active', getOutlineStyles('hover', appearance))}\n            `}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    border: 1px solid transparent;\n    text-decoration: none;\n    vertical-align: middle;\n    border-radius: ${radius('md')};\n    cursor: pointer;\n    position: relative;\n    transition: all ${transitionTime()};\n    box-sizing: border-box;\n\n    ${variants('size', {\n        xs: css`\n            font-size: 11px;\n            padding: ${spacing(0, 2)};\n            height: 20px;\n            line-height: 12px;\n        `,\n        sm: css`\n            font-size: 12px;\n            padding: ${spacing(0, 3)};\n            height: 30px;\n            line-height: 12px;\n        `,\n        md: css`\n            font-size: 14px;\n            padding: ${spacing(0, 3)};\n            height: 35px;\n            line-height: 14px;\n        `,\n        lg: css`\n            font-size: 18px;\n            padding: ${spacing(0, 4)};\n            height: 45px;\n            line-height: 18px;\n        `,\n    })}\n\n    ${variantColorStyles}\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${color('surface.secondary')};\n        color: ${color('content.disabled')};\n        border-color: ${color('content.disabled')};\n\n        ${modifier('isLoading', variantColorStyles)}\n    }\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n\n    ${variants('size', {\n        xs: css`\n            gap: ${spacing(1)};\n        `,\n        sm: css`\n            gap: ${spacing(2)};\n        `,\n        md: css`\n            gap: ${spacing(2)};\n        `,\n        lg: css`\n            gap: ${spacing(2)};\n        `,\n    })}\n\n    ${modifier(\n        'isHidden',\n        css`\n            opacity: 0;\n        `,\n    )}\n`;\n\nexport const Text = styled.span<{ size: Size; ellipsis?: boolean }>`\n    position: relative;\n    align-items: center;\n    display: inline-flex;\n    white-space: nowrap;\n\n    ${modifier(\n        'ellipsis',\n        css`\n            overflow: hidden;\n            text-overflow: ellipsis;\n        `,\n    )}\n\n    ${variants('size', {\n        xs: css`\n            top: 0;\n        `,\n        sm: css`\n            top: -1px; // Make text visually centered\n        `,\n        md: css`\n            top: -1px; // Make text visually centered\n        `,\n        lg: css`\n            top: -1px; // Make text visually centered\n        `,\n    })}\n`;\n\nexport const LoadingSpinner = styled(Spinner)`\n    fill: currentColor;\n    width: 1.3em;\n    height: 1.3em;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n","import type { ReactNode } from 'react';\nimport React, { forwardRef } from 'react';\n\nimport type { PressableElement, PressableProps } from '../Pressable';\nimport { Container, Content, LoadingSpinner, Text } from './styles';\n\nexport type Size = 'xs' | 'sm' | 'md' | 'lg';\nexport type Appearance = 'default' | 'primary' | 'danger' | 'warning';\nexport type ButtonVariant = 'solid' | 'outline';\n\nexport type ButtonCustomProps = {\n    size?: Size;\n    appearance?: Appearance;\n    variant?: ButtonVariant;\n    disabled?: boolean;\n    loading?: boolean;\n    active?: boolean;\n    type?: 'button' | 'submit' | 'reset' | undefined;\n    leftIcon?: ReactNode;\n    rightIcon?: ReactNode;\n    ellipsis?: boolean;\n    children?: ReactNode | undefined;\n};\n\nexport type ButtonProps = PressableProps & ButtonCustomProps;\n\nconst Button = forwardRef<PressableElement, ButtonProps>(\n    (\n        {\n            size = 'md',\n            variant = 'solid',\n            type = 'button',\n            appearance = 'default',\n            loading = false,\n            active = false,\n            children,\n            leftIcon,\n            rightIcon,\n            ellipsis,\n            ...rest\n        },\n        ref,\n    ) => (\n        <Container\n            ref={ref}\n            type={rest.href ? undefined : type}\n            size={size}\n            variant={variant}\n            appearance={appearance}\n            isLoading={loading} // Use isLoading otherwise it causes a React warning\n            active={active}\n            {...rest}\n            disabled={('disabled' in rest && rest.disabled) || loading}\n            aria-expanded={active}\n        >\n            <Content\n                isHidden={loading} // Use isHidden otherwise it causes a React warning\n                size={size}\n            >\n                {leftIcon}\n                <Text size={size} ellipsis={ellipsis}>\n                    {children}\n                </Text>\n                {rightIcon}\n            </Content>\n            {loading && <LoadingSpinner aria-busy=\"true\" aria-live=\"polite\" aria-label=\"Loading\" />}\n        </Container>\n    ),\n);\n\nButton.displayName = 'Button';\n\nexport default Button;\n"],"names":[],"sourceRoot":""}